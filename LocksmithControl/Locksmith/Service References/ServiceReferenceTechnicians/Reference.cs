//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.21006.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace Locksmith.ServiceReferenceTechnicians {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Technician", Namespace="http://schemas.datacontract.org/2004/07/Locksmith.Web")]
    public partial class Technician : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string FirstNameField;
        
        private string LastNameField;
        
        private string CompanyField;
        
        private string AddressField;
        
        private string StateField;
        
        private string CityField;
        
        private string PhoneField;
        
        private string MobilePhoneField;
        
        private string emailField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public string MobilePhone {
            get {
                return this.MobilePhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.MobilePhoneField, value) != true)) {
                    this.MobilePhoneField = value;
                    this.RaisePropertyChanged("MobilePhone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Company", Namespace="http://schemas.datacontract.org/2004/07/Locksmith.Web")]
    public partial class Company : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string NameField;
        
        private string AddressField;
        
        private string StateField;
        
        private string CityField;
        
        private string Zip_CodeField;
        
        private string Phone1Field;
        
        private string Phone2Field;
        
        private string Phone3Field;
        
        private string FaxField;
        
        private string EmailField;
        
        private string UrlField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string Zip_Code {
            get {
                return this.Zip_CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.Zip_CodeField, value) != true)) {
                    this.Zip_CodeField = value;
                    this.RaisePropertyChanged("Zip_Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string Phone1 {
            get {
                return this.Phone1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Phone1Field, value) != true)) {
                    this.Phone1Field = value;
                    this.RaisePropertyChanged("Phone1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public string Phone2 {
            get {
                return this.Phone2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Phone2Field, value) != true)) {
                    this.Phone2Field = value;
                    this.RaisePropertyChanged("Phone2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public string Phone3 {
            get {
                return this.Phone3Field;
            }
            set {
                if ((object.ReferenceEquals(this.Phone3Field, value) != true)) {
                    this.Phone3Field = value;
                    this.RaisePropertyChanged("Phone3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public string Fax {
            get {
                return this.FaxField;
            }
            set {
                if ((object.ReferenceEquals(this.FaxField, value) != true)) {
                    this.FaxField = value;
                    this.RaisePropertyChanged("Fax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceTechnicians.IServiceLocksmith")]
    public interface IServiceLocksmith {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceLocksmith/GetTechnicianList", ReplyAction="http://tempuri.org/IServiceLocksmith/GetTechnicianListResponse")]
        System.IAsyncResult BeginGetTechnicianList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Technician> EndGetTechnicianList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceLocksmith/InsertNewTechnician", ReplyAction="http://tempuri.org/IServiceLocksmith/InsertNewTechnicianResponse")]
        System.IAsyncResult BeginInsertNewTechnician(string firstName, string lastName, string address, string state, string city, string company, string email, string phone, string mobilePhone, System.AsyncCallback callback, object asyncState);
        
        bool EndInsertNewTechnician(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceLocksmith/GetCompanyList", ReplyAction="http://tempuri.org/IServiceLocksmith/GetCompanyListResponse")]
        System.IAsyncResult BeginGetCompanyList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Company> EndGetCompanyList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceLocksmith/InsertNewComapny", ReplyAction="http://tempuri.org/IServiceLocksmith/InsertNewComapnyResponse")]
        System.IAsyncResult BeginInsertNewComapny(string name, string address, string state, string city, string zip, string url, string email, string phone1, string phone2, string phone3, string fax, System.AsyncCallback callback, object asyncState);
        
        bool EndInsertNewComapny(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceLocksmithChannel : Locksmith.ServiceReferenceTechnicians.IServiceLocksmith, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTechnicianListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTechnicianListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Technician> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Technician>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertNewTechnicianCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertNewTechnicianCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCompanyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCompanyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Company> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Company>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertNewComapnyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertNewComapnyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceLocksmithClient : System.ServiceModel.ClientBase<Locksmith.ServiceReferenceTechnicians.IServiceLocksmith>, Locksmith.ServiceReferenceTechnicians.IServiceLocksmith {
        
        private BeginOperationDelegate onBeginGetTechnicianListDelegate;
        
        private EndOperationDelegate onEndGetTechnicianListDelegate;
        
        private System.Threading.SendOrPostCallback onGetTechnicianListCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertNewTechnicianDelegate;
        
        private EndOperationDelegate onEndInsertNewTechnicianDelegate;
        
        private System.Threading.SendOrPostCallback onInsertNewTechnicianCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCompanyListDelegate;
        
        private EndOperationDelegate onEndGetCompanyListDelegate;
        
        private System.Threading.SendOrPostCallback onGetCompanyListCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertNewComapnyDelegate;
        
        private EndOperationDelegate onEndInsertNewComapnyDelegate;
        
        private System.Threading.SendOrPostCallback onInsertNewComapnyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceLocksmithClient() {
        }
        
        public ServiceLocksmithClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceLocksmithClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLocksmithClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLocksmithClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetTechnicianListCompletedEventArgs> GetTechnicianListCompleted;
        
        public event System.EventHandler<InsertNewTechnicianCompletedEventArgs> InsertNewTechnicianCompleted;
        
        public event System.EventHandler<GetCompanyListCompletedEventArgs> GetCompanyListCompleted;
        
        public event System.EventHandler<InsertNewComapnyCompletedEventArgs> InsertNewComapnyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Locksmith.ServiceReferenceTechnicians.IServiceLocksmith.BeginGetTechnicianList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTechnicianList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Technician> Locksmith.ServiceReferenceTechnicians.IServiceLocksmith.EndGetTechnicianList(System.IAsyncResult result) {
            return base.Channel.EndGetTechnicianList(result);
        }
        
        private System.IAsyncResult OnBeginGetTechnicianList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Locksmith.ServiceReferenceTechnicians.IServiceLocksmith)(this)).BeginGetTechnicianList(callback, asyncState);
        }
        
        private object[] OnEndGetTechnicianList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Technician> retVal = ((Locksmith.ServiceReferenceTechnicians.IServiceLocksmith)(this)).EndGetTechnicianList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTechnicianListCompleted(object state) {
            if ((this.GetTechnicianListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTechnicianListCompleted(this, new GetTechnicianListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTechnicianListAsync() {
            this.GetTechnicianListAsync(null);
        }
        
        public void GetTechnicianListAsync(object userState) {
            if ((this.onBeginGetTechnicianListDelegate == null)) {
                this.onBeginGetTechnicianListDelegate = new BeginOperationDelegate(this.OnBeginGetTechnicianList);
            }
            if ((this.onEndGetTechnicianListDelegate == null)) {
                this.onEndGetTechnicianListDelegate = new EndOperationDelegate(this.OnEndGetTechnicianList);
            }
            if ((this.onGetTechnicianListCompletedDelegate == null)) {
                this.onGetTechnicianListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTechnicianListCompleted);
            }
            base.InvokeAsync(this.onBeginGetTechnicianListDelegate, null, this.onEndGetTechnicianListDelegate, this.onGetTechnicianListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Locksmith.ServiceReferenceTechnicians.IServiceLocksmith.BeginInsertNewTechnician(string firstName, string lastName, string address, string state, string city, string company, string email, string phone, string mobilePhone, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertNewTechnician(firstName, lastName, address, state, city, company, email, phone, mobilePhone, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Locksmith.ServiceReferenceTechnicians.IServiceLocksmith.EndInsertNewTechnician(System.IAsyncResult result) {
            return base.Channel.EndInsertNewTechnician(result);
        }
        
        private System.IAsyncResult OnBeginInsertNewTechnician(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string firstName = ((string)(inValues[0]));
            string lastName = ((string)(inValues[1]));
            string address = ((string)(inValues[2]));
            string state = ((string)(inValues[3]));
            string city = ((string)(inValues[4]));
            string company = ((string)(inValues[5]));
            string email = ((string)(inValues[6]));
            string phone = ((string)(inValues[7]));
            string mobilePhone = ((string)(inValues[8]));
            return ((Locksmith.ServiceReferenceTechnicians.IServiceLocksmith)(this)).BeginInsertNewTechnician(firstName, lastName, address, state, city, company, email, phone, mobilePhone, callback, asyncState);
        }
        
        private object[] OnEndInsertNewTechnician(System.IAsyncResult result) {
            bool retVal = ((Locksmith.ServiceReferenceTechnicians.IServiceLocksmith)(this)).EndInsertNewTechnician(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertNewTechnicianCompleted(object state) {
            if ((this.InsertNewTechnicianCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertNewTechnicianCompleted(this, new InsertNewTechnicianCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertNewTechnicianAsync(string firstName, string lastName, string address, string state, string city, string company, string email, string phone, string mobilePhone) {
            this.InsertNewTechnicianAsync(firstName, lastName, address, state, city, company, email, phone, mobilePhone, null);
        }
        
        public void InsertNewTechnicianAsync(string firstName, string lastName, string address, string state, string city, string company, string email, string phone, string mobilePhone, object userState) {
            if ((this.onBeginInsertNewTechnicianDelegate == null)) {
                this.onBeginInsertNewTechnicianDelegate = new BeginOperationDelegate(this.OnBeginInsertNewTechnician);
            }
            if ((this.onEndInsertNewTechnicianDelegate == null)) {
                this.onEndInsertNewTechnicianDelegate = new EndOperationDelegate(this.OnEndInsertNewTechnician);
            }
            if ((this.onInsertNewTechnicianCompletedDelegate == null)) {
                this.onInsertNewTechnicianCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertNewTechnicianCompleted);
            }
            base.InvokeAsync(this.onBeginInsertNewTechnicianDelegate, new object[] {
                        firstName,
                        lastName,
                        address,
                        state,
                        city,
                        company,
                        email,
                        phone,
                        mobilePhone}, this.onEndInsertNewTechnicianDelegate, this.onInsertNewTechnicianCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Locksmith.ServiceReferenceTechnicians.IServiceLocksmith.BeginGetCompanyList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCompanyList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Company> Locksmith.ServiceReferenceTechnicians.IServiceLocksmith.EndGetCompanyList(System.IAsyncResult result) {
            return base.Channel.EndGetCompanyList(result);
        }
        
        private System.IAsyncResult OnBeginGetCompanyList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Locksmith.ServiceReferenceTechnicians.IServiceLocksmith)(this)).BeginGetCompanyList(callback, asyncState);
        }
        
        private object[] OnEndGetCompanyList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Company> retVal = ((Locksmith.ServiceReferenceTechnicians.IServiceLocksmith)(this)).EndGetCompanyList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCompanyListCompleted(object state) {
            if ((this.GetCompanyListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCompanyListCompleted(this, new GetCompanyListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCompanyListAsync() {
            this.GetCompanyListAsync(null);
        }
        
        public void GetCompanyListAsync(object userState) {
            if ((this.onBeginGetCompanyListDelegate == null)) {
                this.onBeginGetCompanyListDelegate = new BeginOperationDelegate(this.OnBeginGetCompanyList);
            }
            if ((this.onEndGetCompanyListDelegate == null)) {
                this.onEndGetCompanyListDelegate = new EndOperationDelegate(this.OnEndGetCompanyList);
            }
            if ((this.onGetCompanyListCompletedDelegate == null)) {
                this.onGetCompanyListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCompanyListCompleted);
            }
            base.InvokeAsync(this.onBeginGetCompanyListDelegate, null, this.onEndGetCompanyListDelegate, this.onGetCompanyListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Locksmith.ServiceReferenceTechnicians.IServiceLocksmith.BeginInsertNewComapny(string name, string address, string state, string city, string zip, string url, string email, string phone1, string phone2, string phone3, string fax, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertNewComapny(name, address, state, city, zip, url, email, phone1, phone2, phone3, fax, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Locksmith.ServiceReferenceTechnicians.IServiceLocksmith.EndInsertNewComapny(System.IAsyncResult result) {
            return base.Channel.EndInsertNewComapny(result);
        }
        
        private System.IAsyncResult OnBeginInsertNewComapny(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            string address = ((string)(inValues[1]));
            string state = ((string)(inValues[2]));
            string city = ((string)(inValues[3]));
            string zip = ((string)(inValues[4]));
            string url = ((string)(inValues[5]));
            string email = ((string)(inValues[6]));
            string phone1 = ((string)(inValues[7]));
            string phone2 = ((string)(inValues[8]));
            string phone3 = ((string)(inValues[9]));
            string fax = ((string)(inValues[10]));
            return ((Locksmith.ServiceReferenceTechnicians.IServiceLocksmith)(this)).BeginInsertNewComapny(name, address, state, city, zip, url, email, phone1, phone2, phone3, fax, callback, asyncState);
        }
        
        private object[] OnEndInsertNewComapny(System.IAsyncResult result) {
            bool retVal = ((Locksmith.ServiceReferenceTechnicians.IServiceLocksmith)(this)).EndInsertNewComapny(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertNewComapnyCompleted(object state) {
            if ((this.InsertNewComapnyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertNewComapnyCompleted(this, new InsertNewComapnyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertNewComapnyAsync(string name, string address, string state, string city, string zip, string url, string email, string phone1, string phone2, string phone3, string fax) {
            this.InsertNewComapnyAsync(name, address, state, city, zip, url, email, phone1, phone2, phone3, fax, null);
        }
        
        public void InsertNewComapnyAsync(string name, string address, string state, string city, string zip, string url, string email, string phone1, string phone2, string phone3, string fax, object userState) {
            if ((this.onBeginInsertNewComapnyDelegate == null)) {
                this.onBeginInsertNewComapnyDelegate = new BeginOperationDelegate(this.OnBeginInsertNewComapny);
            }
            if ((this.onEndInsertNewComapnyDelegate == null)) {
                this.onEndInsertNewComapnyDelegate = new EndOperationDelegate(this.OnEndInsertNewComapny);
            }
            if ((this.onInsertNewComapnyCompletedDelegate == null)) {
                this.onInsertNewComapnyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertNewComapnyCompleted);
            }
            base.InvokeAsync(this.onBeginInsertNewComapnyDelegate, new object[] {
                        name,
                        address,
                        state,
                        city,
                        zip,
                        url,
                        email,
                        phone1,
                        phone2,
                        phone3,
                        fax}, this.onEndInsertNewComapnyDelegate, this.onInsertNewComapnyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Locksmith.ServiceReferenceTechnicians.IServiceLocksmith CreateChannel() {
            return new ServiceLocksmithClientChannel(this);
        }
        
        private class ServiceLocksmithClientChannel : ChannelBase<Locksmith.ServiceReferenceTechnicians.IServiceLocksmith>, Locksmith.ServiceReferenceTechnicians.IServiceLocksmith {
            
            public ServiceLocksmithClientChannel(System.ServiceModel.ClientBase<Locksmith.ServiceReferenceTechnicians.IServiceLocksmith> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetTechnicianList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetTechnicianList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Technician> EndGetTechnicianList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Technician> _result = ((System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Technician>)(base.EndInvoke("GetTechnicianList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertNewTechnician(string firstName, string lastName, string address, string state, string city, string company, string email, string phone, string mobilePhone, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = firstName;
                _args[1] = lastName;
                _args[2] = address;
                _args[3] = state;
                _args[4] = city;
                _args[5] = company;
                _args[6] = email;
                _args[7] = phone;
                _args[8] = mobilePhone;
                System.IAsyncResult _result = base.BeginInvoke("InsertNewTechnician", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndInsertNewTechnician(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("InsertNewTechnician", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCompanyList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCompanyList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Company> EndGetCompanyList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Company> _result = ((System.Collections.ObjectModel.ObservableCollection<Locksmith.ServiceReferenceTechnicians.Company>)(base.EndInvoke("GetCompanyList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertNewComapny(string name, string address, string state, string city, string zip, string url, string email, string phone1, string phone2, string phone3, string fax, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[11];
                _args[0] = name;
                _args[1] = address;
                _args[2] = state;
                _args[3] = city;
                _args[4] = zip;
                _args[5] = url;
                _args[6] = email;
                _args[7] = phone1;
                _args[8] = phone2;
                _args[9] = phone3;
                _args[10] = fax;
                System.IAsyncResult _result = base.BeginInvoke("InsertNewComapny", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndInsertNewComapny(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("InsertNewComapny", _args, result)));
                return _result;
            }
        }
    }
}
