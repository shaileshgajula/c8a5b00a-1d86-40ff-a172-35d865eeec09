#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StrongerOrg.Backoffice.DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Tourna")]
	public partial class TournaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAppointment(Appointment instance);
    partial void UpdateAppointment(Appointment instance);
    partial void DeleteAppointment(Appointment instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertJobsLog(JobsLog instance);
    partial void UpdateJobsLog(JobsLog instance);
    partial void DeleteJobsLog(JobsLog instance);
    partial void InsertOrganisation(Organisation instance);
    partial void UpdateOrganisation(Organisation instance);
    partial void DeleteOrganisation(Organisation instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertTimezone(Timezone instance);
    partial void UpdateTimezone(Timezone instance);
    partial void DeleteTimezone(Timezone instance);
    partial void InsertTournament(Tournament instance);
    partial void UpdateTournament(Tournament instance);
    partial void DeleteTournament(Tournament instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertDefaultHoliday(DefaultHoliday instance);
    partial void UpdateDefaultHoliday(DefaultHoliday instance);
    partial void DeleteDefaultHoliday(DefaultHoliday instance);
    partial void InsertOrganisationHoliday(OrganisationHoliday instance);
    partial void UpdateOrganisationHoliday(OrganisationHoliday instance);
    partial void DeleteOrganisationHoliday(OrganisationHoliday instance);
    #endregion
		
		public TournaDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["StrongerOrgString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TournaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TournaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TournaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TournaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Appointment> Appointments
		{
			get
			{
				return this.GetTable<Appointment>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<JobsLog> JobsLogs
		{
			get
			{
				return this.GetTable<JobsLog>();
			}
		}
		
		public System.Data.Linq.Table<Membership2Organisation> Membership2Organisations
		{
			get
			{
				return this.GetTable<Membership2Organisation>();
			}
		}
		
		public System.Data.Linq.Table<Organisation> Organisations
		{
			get
			{
				return this.GetTable<Organisation>();
			}
		}
		
		public System.Data.Linq.Table<Organisation2Game> Organisation2Games
		{
			get
			{
				return this.GetTable<Organisation2Game>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Players2Tournament> Players2Tournaments
		{
			get
			{
				return this.GetTable<Players2Tournament>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedules
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<TextContent> TextContents
		{
			get
			{
				return this.GetTable<TextContent>();
			}
		}
		
		public System.Data.Linq.Table<Timezone> Timezones
		{
			get
			{
				return this.GetTable<Timezone>();
			}
		}
		
		public System.Data.Linq.Table<Tournament> Tournaments
		{
			get
			{
				return this.GetTable<Tournament>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UsersCurrentActivity> UsersCurrentActivities
		{
			get
			{
				return this.GetTable<UsersCurrentActivity>();
			}
		}
		
		public System.Data.Linq.Table<DefaultHoliday> DefaultHolidays
		{
			get
			{
				return this.GetTable<DefaultHoliday>();
			}
		}
		
		public System.Data.Linq.Table<OrganisationHoliday> OrganisationHolidays
		{
			get
			{
				return this.GetTable<OrganisationHoliday>();
			}
		}
		
		[Function(Name="dbo.PlayersGet")]
		public ISingleResult<PlayersGetResult> PlayersGet([Parameter(Name="OrganisationId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> organisationId, [Parameter(Name="TournamentId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> tournamentId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), organisationId, tournamentId);
			return ((ISingleResult<PlayersGetResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Appointments")]
	public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Subject;
		
		private System.DateTime _Start;
		
		private System.DateTime _End;
		
		private System.Nullable<int> _RoomID;
		
		private System.Nullable<int> _UserID;
		
		private string _RecurrenceRule;
		
		private System.Nullable<int> _RecurrenceParentID;
		
		private string _Annotations;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntityRef<Appointment> _Appointment1;
		
		private EntityRef<Room> _Room;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnEndChanging(System.DateTime value);
    partial void OnEndChanged();
    partial void OnRoomIDChanging(System.Nullable<int> value);
    partial void OnRoomIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnRecurrenceRuleChanging(string value);
    partial void OnRecurrenceRuleChanged();
    partial void OnRecurrenceParentIDChanging(System.Nullable<int> value);
    partial void OnRecurrenceParentIDChanged();
    partial void OnAnnotationsChanging(string value);
    partial void OnAnnotationsChanged();
    #endregion
		
		public Appointment()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._Appointment1 = default(EntityRef<Appointment>);
			this._Room = default(EntityRef<Room>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Subject", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_Start", DbType="DateTime NOT NULL")]
		public System.DateTime Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[Column(Name="[End]", Storage="_End", DbType="DateTime NOT NULL")]
		public System.DateTime End
		{
			get
			{
				return this._End;
			}
			set
			{
				if ((this._End != value))
				{
					this.OnEndChanging(value);
					this.SendPropertyChanging();
					this._End = value;
					this.SendPropertyChanged("End");
					this.OnEndChanged();
				}
			}
		}
		
		[Column(Storage="_RoomID", DbType="Int")]
		public System.Nullable<int> RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_RecurrenceRule", DbType="NVarChar(1024)")]
		public string RecurrenceRule
		{
			get
			{
				return this._RecurrenceRule;
			}
			set
			{
				if ((this._RecurrenceRule != value))
				{
					this.OnRecurrenceRuleChanging(value);
					this.SendPropertyChanging();
					this._RecurrenceRule = value;
					this.SendPropertyChanged("RecurrenceRule");
					this.OnRecurrenceRuleChanged();
				}
			}
		}
		
		[Column(Storage="_RecurrenceParentID", DbType="Int")]
		public System.Nullable<int> RecurrenceParentID
		{
			get
			{
				return this._RecurrenceParentID;
			}
			set
			{
				if ((this._RecurrenceParentID != value))
				{
					if (this._Appointment1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecurrenceParentIDChanging(value);
					this.SendPropertyChanging();
					this._RecurrenceParentID = value;
					this.SendPropertyChanged("RecurrenceParentID");
					this.OnRecurrenceParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Annotations", DbType="NVarChar(50)")]
		public string Annotations
		{
			get
			{
				return this._Annotations;
			}
			set
			{
				if ((this._Annotations != value))
				{
					this.OnAnnotationsChanging(value);
					this.SendPropertyChanging();
					this._Annotations = value;
					this.SendPropertyChanged("Annotations");
					this.OnAnnotationsChanged();
				}
			}
		}
		
		[Association(Name="Appointment_Appointment", Storage="_Appointments", ThisKey="ID", OtherKey="RecurrenceParentID")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[Association(Name="Appointment_Appointment", Storage="_Appointment1", ThisKey="RecurrenceParentID", OtherKey="ID", IsForeignKey=true)]
		public Appointment Appointment1
		{
			get
			{
				return this._Appointment1.Entity;
			}
			set
			{
				Appointment previousValue = this._Appointment1.Entity;
				if (((previousValue != value) 
							|| (this._Appointment1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Appointment1.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Appointment1.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._RecurrenceParentID = value.ID;
					}
					else
					{
						this._RecurrenceParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Appointment1");
				}
			}
		}
		
		[Association(Name="Room_Appointment", Storage="_Room", ThisKey="RoomID", OtherKey="ID", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._RoomID = value.ID;
					}
					else
					{
						this._RoomID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		[Association(Name="User_Appointment", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Appointment1 = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Appointment1 = null;
		}
	}
	
	[Table(Name="dbo.Games")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _GameDescription;
		
		private string _ConsoleName;
		
		private System.Nullable<bool> _Active;
		
		private string _GameType;
		
		private System.Nullable<bool> _IsOnline;
		
		private System.Nullable<int> _NumberOfCompetitors;
		
		private EntitySet<Tournament> _Tournaments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnGameDescriptionChanging(string value);
    partial void OnGameDescriptionChanged();
    partial void OnConsoleNameChanging(string value);
    partial void OnConsoleNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnGameTypeChanging(string value);
    partial void OnGameTypeChanged();
    partial void OnIsOnlineChanging(System.Nullable<bool> value);
    partial void OnIsOnlineChanged();
    partial void OnNumberOfCompetitorsChanging(System.Nullable<int> value);
    partial void OnNumberOfCompetitorsChanged();
    #endregion
		
		public Game()
		{
			this._Tournaments = new EntitySet<Tournament>(new Action<Tournament>(this.attach_Tournaments), new Action<Tournament>(this.detach_Tournaments));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_GameDescription", DbType="VarChar(550)")]
		public string GameDescription
		{
			get
			{
				return this._GameDescription;
			}
			set
			{
				if ((this._GameDescription != value))
				{
					this.OnGameDescriptionChanging(value);
					this.SendPropertyChanging();
					this._GameDescription = value;
					this.SendPropertyChanged("GameDescription");
					this.OnGameDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ConsoleName", DbType="VarChar(50)")]
		public string ConsoleName
		{
			get
			{
				return this._ConsoleName;
			}
			set
			{
				if ((this._ConsoleName != value))
				{
					this.OnConsoleNameChanging(value);
					this.SendPropertyChanging();
					this._ConsoleName = value;
					this.SendPropertyChanged("ConsoleName");
					this.OnConsoleNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_GameType", DbType="NVarChar(50)")]
		public string GameType
		{
			get
			{
				return this._GameType;
			}
			set
			{
				if ((this._GameType != value))
				{
					this.OnGameTypeChanging(value);
					this.SendPropertyChanging();
					this._GameType = value;
					this.SendPropertyChanged("GameType");
					this.OnGameTypeChanged();
				}
			}
		}
		
		[Column(Storage="_IsOnline", DbType="Bit")]
		public System.Nullable<bool> IsOnline
		{
			get
			{
				return this._IsOnline;
			}
			set
			{
				if ((this._IsOnline != value))
				{
					this.OnIsOnlineChanging(value);
					this.SendPropertyChanging();
					this._IsOnline = value;
					this.SendPropertyChanged("IsOnline");
					this.OnIsOnlineChanged();
				}
			}
		}
		
		[Column(Storage="_NumberOfCompetitors", DbType="Int")]
		public System.Nullable<int> NumberOfCompetitors
		{
			get
			{
				return this._NumberOfCompetitors;
			}
			set
			{
				if ((this._NumberOfCompetitors != value))
				{
					this.OnNumberOfCompetitorsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfCompetitors = value;
					this.SendPropertyChanged("NumberOfCompetitors");
					this.OnNumberOfCompetitorsChanged();
				}
			}
		}
		
		[Association(Name="Game_Tournament", Storage="_Tournaments", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<Tournament> Tournaments
		{
			get
			{
				return this._Tournaments;
			}
			set
			{
				this._Tournaments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[Table(Name="dbo.JobsLog")]
	public partial class JobsLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _JobTitle;
		
		private System.Nullable<System.DateTime> _Createdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnJobTitleChanging(string value);
    partial void OnJobTitleChanged();
    partial void OnCreatedateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedateChanged();
    #endregion
		
		public JobsLog()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_JobTitle", DbType="VarChar(50)")]
		public string JobTitle
		{
			get
			{
				return this._JobTitle;
			}
			set
			{
				if ((this._JobTitle != value))
				{
					this.OnJobTitleChanging(value);
					this.SendPropertyChanging();
					this._JobTitle = value;
					this.SendPropertyChanged("JobTitle");
					this.OnJobTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Createdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> Createdate
		{
			get
			{
				return this._Createdate;
			}
			set
			{
				if ((this._Createdate != value))
				{
					this.OnCreatedateChanging(value);
					this.SendPropertyChanging();
					this._Createdate = value;
					this.SendPropertyChanged("Createdate");
					this.OnCreatedateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Membership2Organisation")]
	public partial class Membership2Organisation
	{
		
		private System.Guid _UserId;
		
		private System.Guid _OrganisationId;
		
		public Membership2Organisation()
		{
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[Column(Storage="_OrganisationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrganisationId
		{
			get
			{
				return this._OrganisationId;
			}
			set
			{
				if ((this._OrganisationId != value))
				{
					this._OrganisationId = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Organisation")]
	public partial class Organisation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private System.Nullable<System.Guid> _ContactPerson;
		
		private string _ShippingAddress;
		
		private string _BillingAddress;
		
		private string _WebSite;
		
		private bool _Active;
		
		private string _CompanyLogo;
		
		private bool _EmailReminders;
		
		private EntitySet<Player> _Players;
		
		private EntitySet<Tournament> _Tournaments;
		
		private EntitySet<OrganisationHoliday> _OrganisationHolidays;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContactPersonChanging(System.Nullable<System.Guid> value);
    partial void OnContactPersonChanged();
    partial void OnShippingAddressChanging(string value);
    partial void OnShippingAddressChanged();
    partial void OnBillingAddressChanging(string value);
    partial void OnBillingAddressChanged();
    partial void OnWebSiteChanging(string value);
    partial void OnWebSiteChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCompanyLogoChanging(string value);
    partial void OnCompanyLogoChanged();
    partial void OnEmailRemindersChanging(bool value);
    partial void OnEmailRemindersChanged();
    #endregion
		
		public Organisation()
		{
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._Tournaments = new EntitySet<Tournament>(new Action<Tournament>(this.attach_Tournaments), new Action<Tournament>(this.detach_Tournaments));
			this._OrganisationHolidays = new EntitySet<OrganisationHoliday>(new Action<OrganisationHoliday>(this.attach_OrganisationHolidays), new Action<OrganisationHoliday>(this.detach_OrganisationHolidays));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ContactPerson", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ContactPerson
		{
			get
			{
				return this._ContactPerson;
			}
			set
			{
				if ((this._ContactPerson != value))
				{
					this.OnContactPersonChanging(value);
					this.SendPropertyChanging();
					this._ContactPerson = value;
					this.SendPropertyChanged("ContactPerson");
					this.OnContactPersonChanged();
				}
			}
		}
		
		[Column(Storage="_ShippingAddress", DbType="NVarChar(250)")]
		public string ShippingAddress
		{
			get
			{
				return this._ShippingAddress;
			}
			set
			{
				if ((this._ShippingAddress != value))
				{
					this.OnShippingAddressChanging(value);
					this.SendPropertyChanging();
					this._ShippingAddress = value;
					this.SendPropertyChanged("ShippingAddress");
					this.OnShippingAddressChanged();
				}
			}
		}
		
		[Column(Storage="_BillingAddress", DbType="NVarChar(250)")]
		public string BillingAddress
		{
			get
			{
				return this._BillingAddress;
			}
			set
			{
				if ((this._BillingAddress != value))
				{
					this.OnBillingAddressChanging(value);
					this.SendPropertyChanging();
					this._BillingAddress = value;
					this.SendPropertyChanged("BillingAddress");
					this.OnBillingAddressChanged();
				}
			}
		}
		
		[Column(Storage="_WebSite", DbType="VarChar(250)")]
		public string WebSite
		{
			get
			{
				return this._WebSite;
			}
			set
			{
				if ((this._WebSite != value))
				{
					this.OnWebSiteChanging(value);
					this.SendPropertyChanging();
					this._WebSite = value;
					this.SendPropertyChanged("WebSite");
					this.OnWebSiteChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyLogo", DbType="VarChar(50)")]
		public string CompanyLogo
		{
			get
			{
				return this._CompanyLogo;
			}
			set
			{
				if ((this._CompanyLogo != value))
				{
					this.OnCompanyLogoChanging(value);
					this.SendPropertyChanging();
					this._CompanyLogo = value;
					this.SendPropertyChanged("CompanyLogo");
					this.OnCompanyLogoChanged();
				}
			}
		}
		
		[Column(Storage="_EmailReminders", DbType="Bit NOT NULL")]
		public bool EmailReminders
		{
			get
			{
				return this._EmailReminders;
			}
			set
			{
				if ((this._EmailReminders != value))
				{
					this.OnEmailRemindersChanging(value);
					this.SendPropertyChanging();
					this._EmailReminders = value;
					this.SendPropertyChanged("EmailReminders");
					this.OnEmailRemindersChanged();
				}
			}
		}
		
		[Association(Name="Organisation_Player", Storage="_Players", ThisKey="Id", OtherKey="OrganisationId")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[Association(Name="Organisation_Tournament", Storage="_Tournaments", ThisKey="Id", OtherKey="OrganisationId")]
		public EntitySet<Tournament> Tournaments
		{
			get
			{
				return this._Tournaments;
			}
			set
			{
				this._Tournaments.Assign(value);
			}
		}
		
		[Association(Name="Organisation_OrganisationHoliday", Storage="_OrganisationHolidays", ThisKey="Id", OtherKey="OrganisationId")]
		public EntitySet<OrganisationHoliday> OrganisationHolidays
		{
			get
			{
				return this._OrganisationHolidays;
			}
			set
			{
				this._OrganisationHolidays.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_Tournaments(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_OrganisationHolidays(OrganisationHoliday entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_OrganisationHolidays(OrganisationHoliday entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
	}
	
	[Table(Name="dbo.Organisation2Games")]
	public partial class Organisation2Game
	{
		
		private System.Nullable<System.Guid> _OrganisationId;
		
		private System.Nullable<int> _GameId;
		
		public Organisation2Game()
		{
		}
		
		[Column(Storage="_OrganisationId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganisationId
		{
			get
			{
				return this._OrganisationId;
			}
			set
			{
				if ((this._OrganisationId != value))
				{
					this._OrganisationId = value;
				}
			}
		}
		
		[Column(Storage="_GameId", DbType="Int")]
		public System.Nullable<int> GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this._GameId = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _OrganisationId;
		
		private string _Name;
		
		private string _Email;
		
		private string _NickName;
		
		private string _Department;
		
		private System.DateTime _CreateDate;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnOrganisationIdChanging(System.Guid value);
    partial void OnOrganisationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public Player()
		{
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_OrganisationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrganisationId
		{
			get
			{
				return this._OrganisationId;
			}
			set
			{
				if ((this._OrganisationId != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganisationId = value;
					this.SendPropertyChanged("OrganisationId");
					this.OnOrganisationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_NickName", DbType="NVarChar(150)")]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this.OnNickNameChanging(value);
					this.SendPropertyChanging();
					this._NickName = value;
					this.SendPropertyChanged("NickName");
					this.OnNickNameChanged();
				}
			}
		}
		
		[Column(Storage="_Department", DbType="NVarChar(50)")]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Association(Name="Organisation_Player", Storage="_Organisation", ThisKey="OrganisationId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._OrganisationId = value.Id;
					}
					else
					{
						this._OrganisationId = default(System.Guid);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Players2Tournaments")]
	public partial class Players2Tournament
	{
		
		private System.Guid _PlayerId;
		
		private System.Guid _TournamentId;
		
		public Players2Tournament()
		{
		}
		
		[Column(Storage="_PlayerId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					this._PlayerId = value;
				}
			}
		}
		
		[Column(Storage="_TournamentId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TournamentId
		{
			get
			{
				return this._TournamentId;
			}
			set
			{
				if ((this._TournamentId != value))
				{
					this._TournamentId = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Rooms")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _RoomName;
		
		private EntitySet<Appointment> _Appointments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoomNameChanging(string value);
    partial void OnRoomNameChanged();
    #endregion
		
		public Room()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoomName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string RoomName
		{
			get
			{
				return this._RoomName;
			}
			set
			{
				if ((this._RoomName != value))
				{
					this.OnRoomNameChanging(value);
					this.SendPropertyChanging();
					this._RoomName = value;
					this.SendPropertyChanged("RoomName");
					this.OnRoomNameChanged();
				}
			}
		}
		
		[Association(Name="Room_Appointment", Storage="_Appointments", ThisKey="ID", OtherKey="RoomID")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
	
	[Table(Name="dbo.Schedules")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _TournamentId;
		
		private System.Guid _PlayerA;
		
		private System.Guid _PlayerB;
		
		private System.DateTime _Start;
		
		private System.DateTime _End;
		
		private System.Nullable<char> _Winner;
		
		private System.Nullable<int> _ScoreA;
		
		private System.Nullable<int> _ScoreB;
		
		private System.Nullable<System.Guid> _UpdatedBy;
		
		private System.Nullable<System.DateTime> _TimeStamp;
		
		private EntityRef<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTournamentIdChanging(System.Guid value);
    partial void OnTournamentIdChanged();
    partial void OnPlayerAChanging(System.Guid value);
    partial void OnPlayerAChanged();
    partial void OnPlayerBChanging(System.Guid value);
    partial void OnPlayerBChanged();
    partial void OnStartChanging(System.DateTime value);
    partial void OnStartChanged();
    partial void OnEndChanging(System.DateTime value);
    partial void OnEndChanged();
    partial void OnWinnerChanging(System.Nullable<char> value);
    partial void OnWinnerChanged();
    partial void OnScoreAChanging(System.Nullable<int> value);
    partial void OnScoreAChanged();
    partial void OnScoreBChanging(System.Nullable<int> value);
    partial void OnScoreBChanged();
    partial void OnUpdatedByChanging(System.Nullable<System.Guid> value);
    partial void OnUpdatedByChanged();
    partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Schedule()
		{
			this._Tournament = default(EntityRef<Tournament>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_TournamentId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TournamentId
		{
			get
			{
				return this._TournamentId;
			}
			set
			{
				if ((this._TournamentId != value))
				{
					if (this._Tournament.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTournamentIdChanging(value);
					this.SendPropertyChanging();
					this._TournamentId = value;
					this.SendPropertyChanged("TournamentId");
					this.OnTournamentIdChanged();
				}
			}
		}
		
		[Column(Storage="_PlayerA", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PlayerA
		{
			get
			{
				return this._PlayerA;
			}
			set
			{
				if ((this._PlayerA != value))
				{
					this.OnPlayerAChanging(value);
					this.SendPropertyChanging();
					this._PlayerA = value;
					this.SendPropertyChanged("PlayerA");
					this.OnPlayerAChanged();
				}
			}
		}
		
		[Column(Storage="_PlayerB", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PlayerB
		{
			get
			{
				return this._PlayerB;
			}
			set
			{
				if ((this._PlayerB != value))
				{
					this.OnPlayerBChanging(value);
					this.SendPropertyChanging();
					this._PlayerB = value;
					this.SendPropertyChanged("PlayerB");
					this.OnPlayerBChanged();
				}
			}
		}
		
		[Column(Storage="_Start", DbType="DateTime NOT NULL")]
		public System.DateTime Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[Column(Name="[End]", Storage="_End", DbType="DateTime NOT NULL")]
		public System.DateTime End
		{
			get
			{
				return this._End;
			}
			set
			{
				if ((this._End != value))
				{
					this.OnEndChanging(value);
					this.SendPropertyChanging();
					this._End = value;
					this.SendPropertyChanged("End");
					this.OnEndChanged();
				}
			}
		}
		
		[Column(Storage="_Winner", DbType="Char(1)")]
		public System.Nullable<char> Winner
		{
			get
			{
				return this._Winner;
			}
			set
			{
				if ((this._Winner != value))
				{
					this.OnWinnerChanging(value);
					this.SendPropertyChanging();
					this._Winner = value;
					this.SendPropertyChanged("Winner");
					this.OnWinnerChanged();
				}
			}
		}
		
		[Column(Storage="_ScoreA", DbType="Int")]
		public System.Nullable<int> ScoreA
		{
			get
			{
				return this._ScoreA;
			}
			set
			{
				if ((this._ScoreA != value))
				{
					this.OnScoreAChanging(value);
					this.SendPropertyChanging();
					this._ScoreA = value;
					this.SendPropertyChanged("ScoreA");
					this.OnScoreAChanged();
				}
			}
		}
		
		[Column(Storage="_ScoreB", DbType="Int")]
		public System.Nullable<int> ScoreB
		{
			get
			{
				return this._ScoreB;
			}
			set
			{
				if ((this._ScoreB != value))
				{
					this.OnScoreBChanging(value);
					this.SendPropertyChanging();
					this._ScoreB = value;
					this.SendPropertyChanged("ScoreB");
					this.OnScoreBChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[Column(Storage="_TimeStamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[Association(Name="Tournament_Schedule", Storage="_Tournament", ThisKey="TournamentId", OtherKey="Id", IsForeignKey=true)]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._TournamentId = value.Id;
					}
					else
					{
						this._TournamentId = default(System.Guid);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TextContent")]
	public partial class TextContent
	{
		
		private int _Id;
		
		private System.Guid _OrganisationId;
		
		private int _ContentType;
		
		private string _Content;
		
		public TextContent()
		{
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_OrganisationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrganisationId
		{
			get
			{
				return this._OrganisationId;
			}
			set
			{
				if ((this._OrganisationId != value))
				{
					this._OrganisationId = value;
				}
			}
		}
		
		[Column(Storage="_ContentType", DbType="Int NOT NULL")]
		public int ContentType
		{
			get
			{
				return this._ContentType;
			}
			set
			{
				if ((this._ContentType != value))
				{
					this._ContentType = value;
				}
			}
		}
		
		[Column(Storage="_Content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this._Content = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Timezones")]
	public partial class Timezone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _timezone_location;
		
		private string _gmt;
		
		private int _offset;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ontimezone_locationChanging(string value);
    partial void Ontimezone_locationChanged();
    partial void OngmtChanging(string value);
    partial void OngmtChanged();
    partial void OnoffsetChanging(int value);
    partial void OnoffsetChanged();
    #endregion
		
		public Timezone()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_timezone_location", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string timezone_location
		{
			get
			{
				return this._timezone_location;
			}
			set
			{
				if ((this._timezone_location != value))
				{
					this.Ontimezone_locationChanging(value);
					this.SendPropertyChanging();
					this._timezone_location = value;
					this.SendPropertyChanged("timezone_location");
					this.Ontimezone_locationChanged();
				}
			}
		}
		
		[Column(Storage="_gmt", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string gmt
		{
			get
			{
				return this._gmt;
			}
			set
			{
				if ((this._gmt != value))
				{
					this.OngmtChanging(value);
					this.SendPropertyChanging();
					this._gmt = value;
					this.SendPropertyChanged("gmt");
					this.OngmtChanged();
				}
			}
		}
		
		[Column(Storage="_offset", DbType="Int NOT NULL")]
		public int offset
		{
			get
			{
				return this._offset;
			}
			set
			{
				if ((this._offset != value))
				{
					this.OnoffsetChanging(value);
					this.SendPropertyChanging();
					this._offset = value;
					this.SendPropertyChanged("offset");
					this.OnoffsetChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Tournaments")]
	public partial class Tournament : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _OrganisationId;
		
		private string _TournamentName;
		
		private string _Abstract;
		
		private string _Locations;
		
		private int _NumberOfPlayersLimit;
		
		private System.Nullable<int> _GameId;
		
		private string _MatchingAlgo;
		
		private System.Nullable<int> _TimeWindowStart;
		
		private System.Nullable<int> _TimeWindowEnd;
		
		private System.Nullable<bool> _IsOpenAllDay;
		
		private System.Nullable<int> _FirstPrize;
		
		private System.Nullable<int> _SecondPrize;
		
		private System.Nullable<int> _ThirdPrize;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private string _EmailTemplate;
		
		private bool _IsApproved;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnOrganisationIdChanging(System.Guid value);
    partial void OnOrganisationIdChanged();
    partial void OnTournamentNameChanging(string value);
    partial void OnTournamentNameChanged();
    partial void OnAbstractChanging(string value);
    partial void OnAbstractChanged();
    partial void OnLocationsChanging(string value);
    partial void OnLocationsChanged();
    partial void OnNumberOfPlayersLimitChanging(int value);
    partial void OnNumberOfPlayersLimitChanged();
    partial void OnGameIdChanging(System.Nullable<int> value);
    partial void OnGameIdChanged();
    partial void OnMatchingAlgoChanging(string value);
    partial void OnMatchingAlgoChanged();
    partial void OnTimeWindowStartChanging(System.Nullable<int> value);
    partial void OnTimeWindowStartChanged();
    partial void OnTimeWindowEndChanging(System.Nullable<int> value);
    partial void OnTimeWindowEndChanged();
    partial void OnIsOpenAllDayChanging(System.Nullable<bool> value);
    partial void OnIsOpenAllDayChanged();
    partial void OnFirstPrizeChanging(System.Nullable<int> value);
    partial void OnFirstPrizeChanged();
    partial void OnSecondPrizeChanging(System.Nullable<int> value);
    partial void OnSecondPrizeChanged();
    partial void OnThirdPrizeChanging(System.Nullable<int> value);
    partial void OnThirdPrizeChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEmailTemplateChanging(string value);
    partial void OnEmailTemplateChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Tournament()
		{
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._Game = default(EntityRef<Game>);
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_OrganisationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrganisationId
		{
			get
			{
				return this._OrganisationId;
			}
			set
			{
				if ((this._OrganisationId != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganisationId = value;
					this.SendPropertyChanged("OrganisationId");
					this.OnOrganisationIdChanged();
				}
			}
		}
		
		[Column(Storage="_TournamentName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TournamentName
		{
			get
			{
				return this._TournamentName;
			}
			set
			{
				if ((this._TournamentName != value))
				{
					this.OnTournamentNameChanging(value);
					this.SendPropertyChanging();
					this._TournamentName = value;
					this.SendPropertyChanged("TournamentName");
					this.OnTournamentNameChanged();
				}
			}
		}
		
		[Column(Storage="_Abstract", DbType="NVarChar(250)")]
		public string Abstract
		{
			get
			{
				return this._Abstract;
			}
			set
			{
				if ((this._Abstract != value))
				{
					this.OnAbstractChanging(value);
					this.SendPropertyChanging();
					this._Abstract = value;
					this.SendPropertyChanged("Abstract");
					this.OnAbstractChanged();
				}
			}
		}
		
		[Column(Storage="_Locations", DbType="NVarChar(50)")]
		public string Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				if ((this._Locations != value))
				{
					this.OnLocationsChanging(value);
					this.SendPropertyChanging();
					this._Locations = value;
					this.SendPropertyChanged("Locations");
					this.OnLocationsChanged();
				}
			}
		}
		
		[Column(Storage="_NumberOfPlayersLimit", DbType="Int NOT NULL")]
		public int NumberOfPlayersLimit
		{
			get
			{
				return this._NumberOfPlayersLimit;
			}
			set
			{
				if ((this._NumberOfPlayersLimit != value))
				{
					this.OnNumberOfPlayersLimitChanging(value);
					this.SendPropertyChanging();
					this._NumberOfPlayersLimit = value;
					this.SendPropertyChanged("NumberOfPlayersLimit");
					this.OnNumberOfPlayersLimitChanged();
				}
			}
		}
		
		[Column(Storage="_GameId", DbType="Int")]
		public System.Nullable<int> GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[Column(Storage="_MatchingAlgo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MatchingAlgo
		{
			get
			{
				return this._MatchingAlgo;
			}
			set
			{
				if ((this._MatchingAlgo != value))
				{
					this.OnMatchingAlgoChanging(value);
					this.SendPropertyChanging();
					this._MatchingAlgo = value;
					this.SendPropertyChanged("MatchingAlgo");
					this.OnMatchingAlgoChanged();
				}
			}
		}
		
		[Column(Storage="_TimeWindowStart", DbType="Int")]
		public System.Nullable<int> TimeWindowStart
		{
			get
			{
				return this._TimeWindowStart;
			}
			set
			{
				if ((this._TimeWindowStart != value))
				{
					this.OnTimeWindowStartChanging(value);
					this.SendPropertyChanging();
					this._TimeWindowStart = value;
					this.SendPropertyChanged("TimeWindowStart");
					this.OnTimeWindowStartChanged();
				}
			}
		}
		
		[Column(Storage="_TimeWindowEnd", DbType="Int")]
		public System.Nullable<int> TimeWindowEnd
		{
			get
			{
				return this._TimeWindowEnd;
			}
			set
			{
				if ((this._TimeWindowEnd != value))
				{
					this.OnTimeWindowEndChanging(value);
					this.SendPropertyChanging();
					this._TimeWindowEnd = value;
					this.SendPropertyChanged("TimeWindowEnd");
					this.OnTimeWindowEndChanged();
				}
			}
		}
		
		[Column(Storage="_IsOpenAllDay", DbType="Bit")]
		public System.Nullable<bool> IsOpenAllDay
		{
			get
			{
				return this._IsOpenAllDay;
			}
			set
			{
				if ((this._IsOpenAllDay != value))
				{
					this.OnIsOpenAllDayChanging(value);
					this.SendPropertyChanging();
					this._IsOpenAllDay = value;
					this.SendPropertyChanged("IsOpenAllDay");
					this.OnIsOpenAllDayChanged();
				}
			}
		}
		
		[Column(Storage="_FirstPrize", DbType="Int")]
		public System.Nullable<int> FirstPrize
		{
			get
			{
				return this._FirstPrize;
			}
			set
			{
				if ((this._FirstPrize != value))
				{
					this.OnFirstPrizeChanging(value);
					this.SendPropertyChanging();
					this._FirstPrize = value;
					this.SendPropertyChanged("FirstPrize");
					this.OnFirstPrizeChanged();
				}
			}
		}
		
		[Column(Storage="_SecondPrize", DbType="Int")]
		public System.Nullable<int> SecondPrize
		{
			get
			{
				return this._SecondPrize;
			}
			set
			{
				if ((this._SecondPrize != value))
				{
					this.OnSecondPrizeChanging(value);
					this.SendPropertyChanging();
					this._SecondPrize = value;
					this.SendPropertyChanged("SecondPrize");
					this.OnSecondPrizeChanged();
				}
			}
		}
		
		[Column(Storage="_ThirdPrize", DbType="Int")]
		public System.Nullable<int> ThirdPrize
		{
			get
			{
				return this._ThirdPrize;
			}
			set
			{
				if ((this._ThirdPrize != value))
				{
					this.OnThirdPrizeChanging(value);
					this.SendPropertyChanging();
					this._ThirdPrize = value;
					this.SendPropertyChanged("ThirdPrize");
					this.OnThirdPrizeChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EmailTemplate", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string EmailTemplate
		{
			get
			{
				return this._EmailTemplate;
			}
			set
			{
				if ((this._EmailTemplate != value))
				{
					this.OnEmailTemplateChanging(value);
					this.SendPropertyChanging();
					this._EmailTemplate = value;
					this.SendPropertyChanged("EmailTemplate");
					this.OnEmailTemplateChanged();
				}
			}
		}
		
		[Column(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Association(Name="Tournament_Schedule", Storage="_Schedules", ThisKey="Id", OtherKey="TournamentId")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[Association(Name="Game_Tournament", Storage="_Game", ThisKey="GameId", OtherKey="Id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Tournaments.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Tournaments.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[Association(Name="Organisation_Tournament", Storage="_Organisation", ThisKey="OrganisationId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.Tournaments.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.Tournaments.Add(this);
						this._OrganisationId = value.Id;
					}
					else
					{
						this._OrganisationId = default(System.Guid);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _UserName;
		
		private EntitySet<Appointment> _Appointments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public User()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Association(Name="User_Appointment", Storage="_Appointments", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.UsersCurrentActivity")]
	public partial class UsersCurrentActivity
	{
		
		private System.Guid _UserId;
		
		private string _Action;
		
		public UsersCurrentActivity()
		{
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[Column(Storage="_Action", DbType="VarChar(250)")]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this._Action = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.DefaultHolidays")]
	public partial class DefaultHoliday : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _Date;
		
		private int _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCountryChanging(int value);
    partial void OnCountryChanged();
    #endregion
		
		public DefaultHoliday()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="Int NOT NULL")]
		public int Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrganisationHolidays")]
	public partial class OrganisationHoliday : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _OrganisationId;
		
		private string _Name;
		
		private System.DateTime _Date;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOrganisationIdChanging(System.Guid value);
    partial void OnOrganisationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public OrganisationHoliday()
		{
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_OrganisationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrganisationId
		{
			get
			{
				return this._OrganisationId;
			}
			set
			{
				if ((this._OrganisationId != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganisationId = value;
					this.SendPropertyChanged("OrganisationId");
					this.OnOrganisationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Association(Name="Organisation_OrganisationHoliday", Storage="_Organisation", ThisKey="OrganisationId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.OrganisationHolidays.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.OrganisationHolidays.Add(this);
						this._OrganisationId = value.Id;
					}
					else
					{
						this._OrganisationId = default(System.Guid);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class PlayersGetResult
	{
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Email;
		
		private string _NickName;
		
		private string _Department;
		
		public PlayersGetResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[Column(Storage="_NickName", DbType="NVarChar(150)")]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this._NickName = value;
				}
			}
		}
		
		[Column(Storage="_Department", DbType="NVarChar(50)")]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this._Department = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
